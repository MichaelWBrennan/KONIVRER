version: '3.8'

services:
  # Dev automation service (default)
  konivrer-autonomous:
    build: .
    container_name: konivrer-autonomous-automation
    ports:
      - "12000:12000"
      - "12001:12001"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - AUTOMATION=true
      - CI=true
      - NODE_ENV=development
    restart: unless-stopped
    command: >
      bash -c "
        echo 'ðŸš€ KONIVRER Autonomous Container Starting...' &&
        echo 'ðŸ¤– Zero manual commands required!' &&
        ./auto-start.sh &
        npm run dev
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dev monitor for automation
  automation-monitor-dev:
    build: .
    container_name: konivrer-automation-monitor-dev
    volumes:
      - .:/app
    environment:
      - AUTOMATION=true
      - MONITOR_ONLY=true
    restart: unless-stopped
    command: >
      bash -c "
        echo 'ðŸ“Š Starting automation monitor...' &&
        while true; do
          echo 'ðŸ“Š Automation Status:' &&
          ps aux | grep automation || echo 'No automation processes found' &&
          sleep 60
        done
      "
    depends_on:
      - konivrer-autonomous
    profiles:
      - dev

  # Continuous automation service
  konivrer-automation:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: konivrer-automation-24-7-365
    restart: always
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - AUTOMATION_MODE=continuous
      - AUTOMATION_INTERVAL=60000
      - AUTOMATION_CONTINUOUS=true
      - AUTOMATION_SELF_HEALING=true
      - AUTOMATION_RESOURCE_EFFICIENT=true
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 0
        window: 120s
    command: >
      sh -c "chmod +x /app/auto-service.sh && 
             /app/auto-service.sh"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "automation/all-in-one.ts"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - continuous

  # Monitor for continuous automation
  automation-monitor:
    image: alpine:latest
    container_name: konivrer-automation-monitor
    restart: always
    depends_on:
      - konivrer-automation
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
    command: >
      sh -c "apk add --no-cache docker-cli && 
             while true; do 
               if ! docker ps | grep -q konivrer-automation-24-7-365; then 
                 echo 'Automation container down, restarting...'; 
                 docker restart konivrer-automation-24-7-365 || docker-compose -f /app/docker-compose.yml up -d konivrer-automation; 
               fi; 
               sleep 60; 
             done"
    profiles:
      - continuous

  # Dev database for backend
  postgres:
    image: postgres:15-alpine
    container_name: konivrer-postgres-dev
    environment:
      POSTGRES_DB: konivrer_db
      POSTGRES_USER: konivrer
      POSTGRES_PASSWORD: konivrer_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U konivrer -d konivrer_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - dev

  # Dev cache for backend
  redis:
    image: redis:7-alpine
    container_name: konivrer-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - dev

  # Dev search engine
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: konivrer-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - dev

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: konivrer-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=konivrer
      - DB_PASSWORD=konivrer_dev
      - DB_DATABASE=konivrer_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
    command: npm run start:dev
    profiles:
      - dev

  # Dedicated Postgres for Keycloak
  postgres-keycloak:
    image: postgres:15
    container_name: konivrer-postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - keycloak

  # Keycloak server
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: konivrer-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_LOG_LEVEL: INFO
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes
      - ./keycloak/import:/opt/keycloak/data/import
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    command: 
      - start-dev
      - --import-realm
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - keycloak

  # Keycloak Admin CLI utility
  keycloak-cli:
    image: quay.io/keycloak/keycloak:latest
    container_name: konivrer-keycloak-cli
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
    volumes:
      - ./keycloak/scripts:/scripts
      - ./keycloak/export:/export
    depends_on:
      keycloak:
        condition: service_healthy
    entrypoint: ["/bin/bash"]
    command: ["-c", "sleep infinity"]
    profiles:
      - keycloak

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  postgres_keycloak_data: