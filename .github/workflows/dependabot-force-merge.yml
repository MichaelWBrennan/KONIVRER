name: "ü§ñ Dependabot Force Merge (Conflict Resolution)"

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to force merge'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  dependabot-force-merge:
    name: "Force merge dependabot PRs with conflict resolution"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: "üì• Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "üîç Determine PR details"
        id: pr_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "is_dependabot=${{ github.actor == 'dependabot[bot]' }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_head=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "pr_base=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT

      - name: "‚ÑπÔ∏è Log PR details"
        run: |
          echo "Processing PR #${{ steps.pr_info.outputs.pr_number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"

      - name: "üìã Get PR details"
        id: pr_details
        run: |
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          
          # Get PR details using GitHub CLI
          gh pr view $PR_NUMBER --json title,headRefName,baseRefName,author,mergeable,mergeStateStatus,isDraft,labels > pr_details.json
          
          TITLE=$(jq -r '.title' pr_details.json)
          HEAD_REF=$(jq -r '.headRefName' pr_details.json)
          BASE_REF=$(jq -r '.baseRefName' pr_details.json)
          AUTHOR=$(jq -r '.author.login' pr_details.json)
          MERGEABLE=$(jq -r '.mergeable' pr_details.json)
          MERGE_STATE=$(jq -r '.mergeStateStatus' pr_details.json)
          IS_DRAFT=$(jq -r '.isDraft' pr_details.json)
          LABELS=$(jq -r '.labels[].name' pr_details.json | tr '\n' ',' | sed 's/,$//')
          
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          echo "base_ref=$BASE_REF" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "mergeable=$MERGEABLE" >> $GITHUB_OUTPUT
          echo "merge_state=$MERGE_STATE" >> $GITHUB_OUTPUT
          echo "is_draft=$IS_DRAFT" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
          
          echo "PR Details:"
          echo "  Title: $TITLE"
          echo "  Head: $HEAD_REF"
          echo "  Base: $BASE_REF"
          echo "  Author: $AUTHOR"
          echo "  Mergeable: $MERGEABLE"
          echo "  Merge State: $MERGE_STATE"
          echo "  Is Draft: $IS_DRAFT"
          echo "  Labels: $LABELS"

      - name: "‚ÑπÔ∏è Log PR status"
        run: |
          echo "PR Status:"
          echo "  Labels: ${{ steps.pr_details.outputs.labels }}"
          echo "  Is Draft: ${{ steps.pr_details.outputs.is_draft }}"
          echo "  Mergeable: ${{ steps.pr_details.outputs.mergeable }}"
          echo "  Merge State: ${{ steps.pr_details.outputs.merge_state }}"
          echo "Proceeding with force merge regardless of status..."

      - name: "üîÑ Switch to PR branch"
        run: |
          PR_HEAD="${{ steps.pr_details.outputs.head_ref }}"
          echo "Switching to branch: $PR_HEAD"
          git checkout "$PR_HEAD"
          git status

      - name: "üîÑ Update base branch"
        run: |
          BASE_REF="${{ steps.pr_details.outputs.base_ref }}"
          echo "Updating base branch: $BASE_REF"
          git fetch origin "$BASE_REF"
          git checkout "$BASE_REF"
          git pull origin "$BASE_REF"

      - name: "üîÄ Merge PR branch into base (resolve conflicts)"
        run: |
          PR_HEAD="${{ steps.pr_details.outputs.head_ref }}"
          BASE_REF="${{ steps.pr_details.outputs.base_ref }}"
          
          echo "Merging $PR_HEAD into $BASE_REF with conflict resolution..."
          
          # Try to merge with conflict resolution
          if git merge "origin/$PR_HEAD" --no-ff --no-commit; then
            echo "‚úÖ Merge successful without conflicts"
            git commit -m "ü§ñ Auto-merge: ${{ steps.pr_details.outputs.title }}

            - Merged by Dependabot Force Merge workflow
            - Resolved any conflicts automatically
            - Original PR: #${{ steps.pr_info.outputs.pr_number }}"
          else
            echo "‚ö†Ô∏è Merge conflicts detected, resolving automatically..."
            
            # Get list of conflicted files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)
            echo "Conflicted files: $CONFLICTED_FILES"
            
            # Resolve conflicts by accepting incoming changes (dependabot's changes)
            for file in $CONFLICTED_FILES; do
              echo "Resolving conflicts in: $file"
              if [ -f "$file" ]; then
                # Use git checkout to accept the incoming version (dependabot's changes)
                git checkout --theirs "$file"
                git add "$file"
                echo "‚úÖ Resolved conflicts in $file by accepting dependabot changes"
              fi
            done
            
            # Commit the merge
            git commit -m "ü§ñ Auto-merge with conflict resolution: ${{ steps.pr_details.outputs.title }}

            - Merged by Dependabot Force Merge workflow
            - Automatically resolved conflicts by accepting dependabot changes
            - Original PR: #${{ steps.pr_info.outputs.pr_number }}
            
            Conflicts resolved in:
            $CONFLICTED_FILES"
            
            echo "‚úÖ Merge completed with conflict resolution"
          fi

      - name: "üöÄ Push merged changes"
        run: |
          BASE_REF="${{ steps.pr_details.outputs.base_ref }}"
          echo "Pushing merged changes to $BASE_REF..."
          git push origin "$BASE_REF"
          echo "‚úÖ Successfully pushed merged changes"

      - name: "‚úÖ Close original PR"
        run: |
          PR_NUMBER="${{ steps.pr_info.outputs.pr_number }}"
          echo "Closing original PR #$PR_NUMBER..."
          
          gh pr comment "$PR_NUMBER" --body "## ‚úÖ **Force merged successfully**
          
          This dependabot PR has been force merged with automatic conflict resolution.
          
          ### Details:
          - **Merged by:** Dependabot Force Merge workflow
          - **Merge method:** Automatic conflict resolution (accepted dependabot changes)
          - **Target branch:** ${{ steps.pr_details.outputs.base_ref }}
          - **Source branch:** ${{ steps.pr_details.outputs.head_ref }}
          
          ### What happened:
          1. ‚úÖ Automatically merged the PR into the target branch
          2. üîß Resolved any conflicts by accepting dependabot's changes
          3. üöÄ Pushed the merged changes to the target branch
          4. üóëÔ∏è This PR will be closed automatically
          
          The dependency update is now live in the target branch!"
          
          # Close the PR
          gh pr close "$PR_NUMBER" --delete-branch
          echo "‚úÖ PR closed and source branch deleted"

      - name: "üßπ Cleanup"
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f pr_details.json pr_info.txt
          echo "‚úÖ Cleanup completed"

      - name: "üìä Summary"
        if: always()
        run: |
          echo "## üìä Dependabot Force Merge Summary"
          echo "  - PR Number: ${{ steps.pr_info.outputs.pr_number }}"
          echo "  - PR Title: ${{ steps.pr_details.outputs.title }}"
          echo "  - Source Branch: ${{ steps.pr_details.outputs.head_ref }}"
          echo "  - Target Branch: ${{ steps.pr_details.outputs.base_ref }}"
          echo "  - Author: ${{ steps.pr_details.outputs.author }}"
          echo "  - Status: ${{ job.status }}"