name: ü§ñ Autonomous Repository Management

on:
  # PR lifecycle events
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

  # CI completion events
  check_suite:
    types: [completed, requested, rerequested]
  workflow_run:
    workflows: ["CI", "Build", "Test", "Security", "Lint"]
    types: [completed]

  # Scheduled maintenance
  schedule:
    - cron: "0 * * * *" # Every hour

  # Manual trigger
  workflow_dispatch:
    inputs:
      force_scan:
        description: "Force scan all open PRs"
        required: false
        default: false
        type: boolean
      target_branch:
        description: "Target branch to scan"
        required: false
        default: "main"
        type: string

env:
  PYTHON_VERSION: "3.11"
  GITHUB_API_VERSION: "2022-11-28"

permissions:
  contents: write
  pull-requests: write
  statuses: write
  checks: read
  issues: write
  actions: read

jobs:
  autonomous-management:
    name: üöÄ Autonomous PR Lifecycle Management
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: ${{ github.event_name == 'pull_request' }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests pyyaml python-dateutil

      - name: üîß Setup Git Configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true

      - name: üîç Load Merge Rules
        id: merge-rules
        run: |
          echo "Loading merge rules configuration..."
          python - << 'PY'
          import yaml, os
          with open('.github/merge-rules.yaml', 'r') as f:
              rules = yaml.safe_load(f) or {}
          policy = rules.get('policy', {})
          outputs = {
              'merge-method': str(policy.get('merge_method', 'squash')),
              'fallback-method': str(policy.get('fallback_merge_method', 'merge')),
              'max-retries': str(policy.get('retries', 3)),
              'backoff-minutes': ",".join(str(x) for x in policy.get('backoff_minutes', [5, 15, 45])),
              'deny-labels': ",".join(policy.get('deny_labels', [])),
              'deny-paths': ",".join(policy.get('deny_paths', [])),
          }
          with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_out:
              for key, value in outputs.items():
                  gh_out.write(f"{key}={value}\n")
          PY

      - name: üö´ Check Safety Guards
        id: safety-check
        run: |
          echo "Checking safety guards..."

          # Check if this is an automation loop
          if [[ "${{ github.event.sender.login }}" == "github-actions[bot]" ]] && \
             [[ "${{ github.event.head_commit.message }}" == *"[auto-merge]"* ]]; then
            echo "::warning::Detected automation loop, exiting safely"
            echo "should-exit=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check for skip flag
          if [[ "${{ github.event.head_commit.message }}" == *"[skip-auto]"* ]]; then
            echo "::info::Skipping automation due to [skip-auto] flag"
            echo "should-exit=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "should-exit=false" >> "$GITHUB_OUTPUT"

      - name: üîÑ Autonomous Merge Orchestrator
        if: steps.safety-check.outputs.should-exit != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          MERGE_METHOD: ${{ steps.merge-rules.outputs.merge-method }}
          FALLBACK_METHOD: ${{ steps.merge-rules.outputs.fallback-method }}
          MAX_RETRIES: ${{ steps.merge-rules.outputs.max-retries }}
          BACKOFF_MINUTES: ${{ steps.merge-rules.outputs.backoff-minutes }}
          DENY_LABELS: ${{ steps.merge-rules.outputs.deny-labels }}
          DENY_PATHS: ${{ steps.merge-rules.outputs.deny-paths }}
        run: |
          echo "üöÄ Starting autonomous merge orchestration..."
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Event: ${{ github.event_name }}"
          echo "Merge method: $MERGE_METHOD"
          echo "Fallback method: $FALLBACK_METHOD"

          # Run the main orchestrator
          python scripts/auto_merge.py \
            --repository "$GITHUB_REPOSITORY" \
            --merge-method "$MERGE_METHOD" \
            --fallback-method "$FALLBACK_METHOD" \
            --max-retries "$MAX_RETRIES" \
            --backoff-minutes "$BACKOFF_MINUTES" \
            --deny-labels "$DENY_LABELS" \
            --deny-paths "$DENY_PATHS" \
            --event "${{ github.event_name }}" \
            --pr-number "${{ github.event.pull_request.number || '' }}"

      - name: üìä Generate Summary
        if: always()
        run: |
          echo "## ü§ñ Autonomous Repository Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.safety-check.outputs.should-exit }}" == "true" ]]; then
            echo "‚úÖ **Status:** Safely exited (automation loop prevention)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Status:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Merge method: ${{ steps.merge-rules.outputs.merge-method }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fallback method: ${{ steps.merge-rules.outputs.fallback-method }}" >> $GITHUB_STEP_SUMMARY
          echo "- Max retries: ${{ steps.merge-rules.outputs.max-retries }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deny labels: ${{ steps.merge-rules.outputs.deny-labels }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This workflow runs autonomously to manage all PR lifecycles with zero human intervention.*" >> $GITHUB_STEP_SUMMARY
