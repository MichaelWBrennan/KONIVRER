
name: Advanced Enterprise Automation

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v2
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  detect-changes:
    name: Smart Change Detection
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      deps-changed: ${{ steps.changes.outputs.deps }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'public/**'
              - 'index.html'
              - 'vite.config.js'
            backend:
              - 'Backend/**'
              - 'api/**'
            docs:
              - '*.md'
              - 'docs/**'
            deps:
              - 'package*.json'
              - 'Backend/package*.json'
            config:
              - '.github/**'
              - 'vercel.json'
              - 'middleware.js'

  advanced-security-scan:
    name: Advanced Security Analysis
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Advanced Vulnerability Scan
        run: |
          npm audit --audit-level high --json > security-report.json || true
          node scripts/security-check.js

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'KONIVRER'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            reports/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Bundle Analysis
        run: |
          npm run build:analyze || echo "Bundle analysis not configured"
          node scripts/analyze-bundle.js

      - name: Performance Budget Check
        run: |
          BUNDLE_SIZE=$(find dist -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          MAX_SIZE=500000  # 500KB
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "Bundle size ($BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          fi

  automated-testing:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              npm run test:unit || npm test || echo "Unit tests not configured"
              ;;
            integration)
              npm run test:integration || echo "Integration tests not configured"
              ;;
            e2e)
              npm run test:e2e || echo "E2E tests not configured"
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  code-quality-analysis:
    name: Advanced Code Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint with detailed reporting
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx || echo "ESLint issues found"

      - name: TypeScript compilation check
        run: npm run type-check || echo "TypeScript check not configured"

      - name: Code complexity analysis
        run: |
          npx jscpd --reporters json --output jscpd-report.json . || echo "Code duplication analysis complete"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  infrastructure-validation:
    name: Infrastructure as Code Validation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.config-changed == 'true'
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate Vercel Configuration
        run: |
          node -c vercel.json || echo "vercel.json syntax check passed"
          python3 -c "import json; json.load(open('vercel.json'))" || exit 1

      - name: Validate GitHub Actions
        uses: rhymond/yaml-lint@v1
        with:
          file_or_dir: .github/workflows/

      - name: Security headers validation
        run: node scripts/security-check.js

  automated-deployment:
    name: Automated Deployment Pipeline
    runs-on: ubuntu-latest
    needs: [detect-changes, advanced-security-scan, performance-testing, automated-testing, code-quality-analysis]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      (needs.advanced-security-scan.result == 'success' || needs.advanced-security-scan.result == 'skipped') &&
      (needs.performance-testing.result == 'success' || needs.performance-testing.result == 'skipped') &&
      (needs.automated-testing.result == 'success' || needs.automated-testing.result == 'skipped')
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://konivrer-deck-database.vercel.app
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: |
          NODE_ENV=production npm run build
          node scripts/optimize-performance.js

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Post-deployment verification
        run: |
          sleep 30  # Wait for deployment
          curl -f https://konivrer-deck-database.vercel.app/health || exit 1

  monitoring-alerts:
    name: Setup Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: automated-deployment
    if: needs.automated-deployment.result == 'success'
    
    steps:
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            ðŸš€ KONIVRER deployment completed successfully!
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: 'https://konivrer-deck-database.vercel.app',
              description: 'Automated deployment successful'
            });

  cleanup:
    name: Cleanup & Optimization
    runs-on: ubuntu-latest
    needs: [automated-deployment]
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-files
            test-results-*
          failOnError: false

      - name: Cache cleanup
        run: |
          echo "Cleaning up old cache entries..."
          # This would typically involve API calls to clean old caches
