# MIT License
# 
# Copyright (c) 2025 KONIVRER Team
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

name: Enterprise Security Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive security scans daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - deep
      include_secrets_scan:
        description: 'Include secrets scanning'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Advanced secrets detection
  secrets-detection:
    name: Advanced Secrets Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.include_secrets_scan != 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: GitLeaks Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
    - name: Detect Secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
        
    - name: Custom secrets patterns
      run: |
        # Check for common secret patterns
        grep -r -E "(password|passwd|pwd|secret|key|token|api_key)" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . || true
        grep -r -E "(['\"])[A-Za-z0-9+/]{40,}(['\"])" --include="*.js" --include="*.jsx" . || true

  # Container security scanning
  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t konivrer-security-scan:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'konivrer-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Docker Scout CVE scanning
      uses: docker/scout-action@v1
      with:
        command: cves
        image: konivrer-security-scan:latest
        sarif-file: scout-results.sarif
        
    - name: Upload Scout results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: scout-results.sarif

  # Infrastructure security
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install checkov bandit safety
        npm install -g @microsoft/rush-security-scanner
        
    - name: Checkov IaC Security
      run: |
        checkov -d . --framework github_actions,dockerfile,secrets --output sarif --output-file checkov-results.sarif || true
        
    - name: Bandit Python Security
      run: |
        bandit -r . -f json -o bandit-results.json || true
        
    - name: Safety Python Dependencies
      run: |
        safety check --json --output safety-results.json || true
        
    - name: Upload infrastructure scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Advanced SAST (Static Application Security Testing)
  advanced-sast:
    name: Advanced SAST Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: ESLint Security Plugin
      run: |
        npm install --save-dev eslint-plugin-security eslint-plugin-no-secrets
        npx eslint . --ext .js,.jsx,.ts,.tsx -c .eslintrc.security.js --format json --output-file eslint-security.json || true
        
    - name: Semgrep SAST
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/react
        generateSarif: "1"
        
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: NodeJsScan
      run: |
        pip install nodejsscan
        nodejsscan -d . -o nodejsscan-results.json || true

  # Dependency vulnerability analysis
  dependency-security:
    name: Advanced Dependency Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'KONIVRER'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}
          --suppression dependency-check-suppressions.xml
          
    - name: Upload OWASP results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/
        
    - name: Snyk Open Source
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json --json-file-output=snyk-results.json
        
    - name: Retire.js
      run: |
        npm install -g retire
        retire --outputformat json --outputpath retire-results.json . || true
        
    - name: Audit CI
      run: |
        npm install -g audit-ci
        audit-ci --config audit-ci.json || true

  # License compliance scanning
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: License Checker
      run: |
        npm install -g license-checker
        license-checker --json --out license-report.json
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' || true
        
    - name: FOSSA License Scan
      uses: fossas/fossa-action@main
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-report
        path: license-report.json

  # Web application security testing
  web-security-testing:
    name: Web Application Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.scan_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install and build
      run: |
        npm ci
        npm run build
        
    - name: Start application
      run: |
        npm run preview &
        sleep 10
        
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:4173'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Nuclei Security Scanner
      uses: projectdiscovery/nuclei-action@main
      with:
        target: 'http://localhost:4173'
        templates: 'cves,vulnerabilities,misconfiguration'
        
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-report
        path: report_html.html

  # Security monitoring and alerting
  security-monitoring:
    name: Security Monitoring Setup
    runs-on: ubuntu-latest
    needs: [secrets-detection, advanced-sast, dependency-security]
    if: always()
    
    steps:
    - name: Aggregate security results
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Secrets Detection: ${{ needs.secrets-detection.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- SAST Analysis: ${{ needs.advanced-sast.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Security: ${{ needs.dependency-security.result }}" >> $GITHUB_STEP_SUMMARY
        
    - name: Create security issue on failure
      if: |
        needs.secrets-detection.result == 'failure' ||
        needs.advanced-sast.result == 'failure' ||
        needs.dependency-security.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🚨 Security Scan Failures Detected';
          const body = `
          ## Security Scan Results
          
          One or more security scans have failed:
          
          - Secrets Detection: ${{ needs.secrets-detection.result }}
          - SAST Analysis: ${{ needs.advanced-sast.result }}
          - Dependency Security: ${{ needs.dependency-security.result }}
          
          Please review the workflow logs and address any security issues.
          
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'urgent']
          });
          
    - name: Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚨 Security scan failures detected in KONIVRER repository!
          Please check the GitHub Actions logs immediately.