# MIT License
# 
# Copyright (c) 2025 KONIVRER Team
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

name: Comprehensive Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

# Consolidated permissions for all security scanning jobs
permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  npm-security-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Only run if SNYK_TOKEN is available
    if: ${{ secrets.SNYK_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set up Snyk CLI
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

      - name: Snyk Open Source monitor
        run: snyk monitor --all-projects || true

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk-code.sarif

  # Placeholder for APIsec scanning (requires API key)
  apisec-scan:
    name: APIsec API Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run if APIsec credentials are available
    if: ${{ secrets.APISEC_USERNAME && secrets.APISEC_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: APIsec scan
        uses: apisec-inc/apisec-run-scan@025432089674a28ba8fb55f8ab06c10215e772ea
        with:
          # Replace with your actual APIsec configuration
          apisec-username: ${{ secrets.APISEC_USERNAME }}
          apisec-password: ${{ secrets.APISEC_PASSWORD }}
          apisec-project: "KONIVRER-deck-database"
          sarif-result-file: "apisec-results.sarif"
          
      - name: Upload APIsec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: apisec-results.sarif

  # Placeholder for EthicalCheck scanning (requires API key)
  ethicalcheck-scan:
    name: EthicalCheck API Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run if EthicalCheck credentials are available
    if: ${{ secrets.ETHICALCHECK_API_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: EthicalCheck scan
        uses: EthicalML/ethicalcheck-action@main
        with:
          api-key: ${{ secrets.ETHICALCHECK_API_KEY }}
          target-url: "https://your-api-endpoint.com"
          sarif-result-file: "ethicalcheck-results.sarif"
          
      - name: Upload EthicalCheck results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ethicalcheck-results.sarif

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [npm-security-audit, codeql-analysis, dependency-review]
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Audit: ${{ needs.npm-security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Review: ${{ needs.dependency-review.result || 'Skipped (not PR)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Snyk Security: ${{ needs.snyk-security.result || 'Skipped (no token)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- APIsec Scan: ${{ needs.apisec-scan.result || 'Skipped (no credentials)' }}" >> $GITHUB_STEP_SUMMARY
          echo "- EthicalCheck: ${{ needs.ethicalcheck-scan.result || 'Skipped (no API key)' }}" >> $GITHUB_STEP_SUMMARY