import { RealTimeAnalytics } from '../analytics/RealTimeAnalytics'; // Import analytics module

export class RealtimeMultiplayer {
  private bayesNetwork: BayesianNetwork | null = null;
  private rlAgent = new MatchmakingRLAgent();
  private graphEmbedder = new GraphEmbedder();
  private analytics = new RealTimeAnalytics(); // Initialize analytics

  constructor(private serverUrl: string = 'ws://0.0.0.0:5000') {
    this.initializeBayesianNetwork();
  }

  initializeBayesianNetwork() {
    // Add more nodes or dependencies for more nuanced matchmaking data
    this.bayesNetwork = new BayesianNetwork([
      {
        id: 'player_skill',
        states: ['low', 'medium', 'high'],
        parents: [],
        cpt: { low: 0.3, medium: 0.4, high: 0.3 },
      },
      {
        id: 'recent_performance',
        states: ['poor', 'average', 'good'],
        parents: ['player_skill'],
        cpt: [
          { when: { player_skill: 'low' }, then: { poor: 0.5, average: 0.3, good: 0.2 } },
          { when: { player_skill: 'medium' }, then: { poor: 0.2, average: 0.5, good: 0.3 } },
          { when: { player_skill: 'high' }, then: { poor: 0.1, average: 0.3, good: 0.6 } },
        ],
      },
      {
        id: 'match_difficulty',
        states: ['easy', 'medium', 'hard'],
        parents: ['recent_performance'],
        cpt: [
          { when: { recent_performance: 'poor' }, then: { easy: 0.6, medium: 0.3, hard: 0.1 } },
          { when: { recent_performance: 'average' }, then: { easy: 0.3, medium: 0.5, hard: 0.2 } },
          { when: { recent_performance: 'good' }, then: { easy: 0.1, medium: 0.4, hard: 0.5 } },
        ],
      },
    ]);

    this.rlAgent.initializeModel();
    this.security.initialize();
    this.security.startRealTimeMonitoring();
    this.analytics.startCollectingData();  // Start real-time analytics
  }

  async findMatch(gameMode: 'casual' | 'ranked' = 'casual'): Promise<void> {
    if (!this.isConnected || !this.socket || !this.bayesNetwork) return;

    const playerSkill = this.estimatePlayerSkill(this.currentPlayer);
    const rlDecision = this.rlAgent.decide(playerSkill);
    const embeddings = this.graphEmbedder.generateEmbeddings(this.currentRoom.players, this.currentRoom);
    const probabilities = this.bayesNetwork.infer({ player_skill: playerSkill });

    this.socket.emit('find_match', { gameMode, probabilities, embeddings, rlDecision });
    this.analytics.logMatchmakingDecision(gameMode, rlDecision, probabilities); // Log with analytics
  }

  private updateAIModels(): void {
    if (this.rlAgent && this.currentRoom) {
      this.rlAgent.updateWithGameResults(this.currentRoom.getLatestResults());
    }
    this.security.performDeepScan();
  }
}