AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Automerge-Pro: Enterprise GitHub App for automated pull request management'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  GitHubAppId:
    Type: String
    Description: GitHub App ID
    NoEcho: true
  
  GitHubWebhookSecret:
    Type: String
    Description: GitHub Webhook Secret
    NoEcho: true
  
  GitHubPrivateKey:
    Type: String
    Description: GitHub App Private Key (base64 encoded)
    NoEcho: true

  LogRetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch log retention period

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        GITHUB_APP_ID: !Ref GitHubAppId
        GITHUB_WEBHOOK_SECRET: !Ref GitHubWebhookSecret
        GITHUB_PRIVATE_KEY: !Ref GitHubPrivateKey
        DYNAMODB_TABLE_NAME: !Ref LicenseTable
        ANALYTICS_EVENTS_TABLE: !Ref AnalyticsEventsTable
        SUPPORT_TICKETS_TABLE: !Ref SupportTicketsTable
        FEEDBACK_TABLE: !Ref FeedbackTable
        ERROR_SNS_TOPIC: !Ref ErrorTopic
    Tracing: Active

Resources:
  # Main Lambda Function
  AutomergeProFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub automerge-pro-${Environment}
      CodeUri: dist/
      Handler: index.handler
      Description: Main Automerge-Pro application handler
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /{proxy+}
            Method: ANY
        RootApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LicenseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsEventsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SupportTicketsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
        - CloudWatchPutMetricPolicy: {}
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ErrorTopic.TopicName
        - CloudWatchLogsFullAccess
        - XRayDaemonWriteAccess
      LogsConfig:
        LogGroup: !Ref AutomergeProLogGroup

  # API Gateway
  AutomergeProApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub automerge-pro-api-${Environment}
      StageName: !Ref Environment
      Description: Automerge-Pro API Gateway
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-GitHub-Event,X-GitHub-Delivery,X-Hub-Signature-256'"
        AllowOrigin: "'*'"
      TracingConfig:
        TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >
          {
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "caller": "$context.identity.caller",
            "user": "$context.identity.user",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "resourcePath": "$context.resourcePath",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "responseLength": "$context.responseLength",
            "error": "$context.error.message",
            "integrationError": "$context.integrationErrorMessage"
          }

  # DynamoDB Table for License Storage
  LicenseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub automerge-pro-licenses-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: installationId
          AttributeType: N
      KeySchema:
        - AttributeName: installationId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: automerge-pro

  # DynamoDB Table for Analytics Events
  AnalyticsEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub automerge-pro-events-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: installationId
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: eventType
          AttributeType: S
      KeySchema:
        - AttributeName: installationId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: EventTypeIndex
          KeySchema:
            - AttributeName: eventType
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: automerge-pro

  # DynamoDB Table for Support Tickets
  SupportTicketsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub automerge-pro-tickets-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ticketId
          AttributeType: S
        - AttributeName: installationId
          AttributeType: N
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: ticketId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: InstallationIdIndex
          KeySchema:
            - AttributeName: installationId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: automerge-pro

  # DynamoDB Table for Feedback
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub automerge-pro-feedback-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: feedbackId
          AttributeType: S
        - AttributeName: installationId
          AttributeType: N
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: feedbackId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: InstallationIdIndex
          KeySchema:
            - AttributeName: installationId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: automerge-pro

  # License Validation Function
  LicenseValidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub automerge-pro-license-validator-${Environment}
      CodeUri: dist/
      Handler: license-validator.handler
      Description: Dedicated license validation endpoint
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /validate-license/{installationId}
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LicenseTable
      LogsConfig:
        LogGroup: !Ref LicenseValidationLogGroup

  # CloudWatch Log Groups
  AutomergeProLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/automerge-pro-${Environment}
      RetentionInDays: !Ref LogRetentionInDays

  LicenseValidationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/automerge-pro-license-validator-${Environment}
      RetentionInDays: !Ref LogRetentionInDays

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/automerge-pro-${Environment}
      RetentionInDays: !Ref LogRetentionInDays

  # CloudWatch Alarms
  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub automerge-pro-errors-${Environment}
      AlarmDescription: Lambda function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AutomergeProFunction
      AlarmActions:
        - !Ref ErrorTopic

  ThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub automerge-pro-throttles-${Environment}
      AlarmDescription: Lambda function throttles
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AutomergeProFunction
      AlarmActions:
        - !Ref ErrorTopic

  # SNS Topic for Alerts
  ErrorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub automerge-pro-alerts-${Environment}
      DisplayName: Automerge-Pro Alerts

  # IAM Role for GitHub Actions OIDC
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub automerge-pro-github-actions-${Environment}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': sts.amazonaws.com
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:MichaelWBrennan/KONIVRER-deck-database:*'
      Policies:
        - PolicyName: DeploymentPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                  - apigateway:*
                  - cloudformation:*
                  - iam:PassRole
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Custom Domain (optional)
  # CustomDomain:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     DomainName: !Sub automerge-pro-${Environment}.yourdomain.com
  #     CertificateArn: !Ref SSLCertificate

Outputs:
  AutomergeProApiUrl:
    Description: API Gateway URL for Automerge-Pro
    Value: !Sub https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl

  WebhookUrl:
    Description: GitHub Webhook URL
    Value: !Sub https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/webhook
    Export:
      Name: !Sub ${AWS::StackName}-WebhookUrl

  LicenseTableName:
    Description: DynamoDB table name for licenses
    Value: !Ref LicenseTable
    Export:
      Name: !Sub ${AWS::StackName}-LicenseTable

  GitHubActionsRoleArn:
    Description: IAM Role ARN for GitHub Actions
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-GitHubActionsRole