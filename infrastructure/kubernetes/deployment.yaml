apiVersion: apps/v1
kind: Deployment
metadata:
  name: konivrer-app
  namespace: konivrer
  labels:
    app: konivrer
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: konivrer
  template:
    metadata:
      labels:
        app: konivrer
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      # Pod disruption budget for high availability
      terminationGracePeriodSeconds: 30

      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - konivrer
                topologyKey: kubernetes.io/hostname

      containers:
        - name: konivrer-app
          image: konivrer/app:latest
          imagePullPolicy: Always

          # Resource limits and requests
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"

          # Port configuration
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP

          # Advanced health checks
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8081
              httpHeaders:
                - name: X-Health-Check
                  value: "liveness"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8081
              httpHeaders:
                - name: X-Health-Check
                  value: "readiness"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1

          startupProbe:
            httpGet:
              path: /health/startup
              port: 8081
              httpHeaders:
                - name: X-Health-Check
                  value: "startup"
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30
            successThreshold: 1

          # Environment variables
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: METRICS_PORT
              value: "8080"
            - name: HEALTH_PORT
              value: "8081"
            - name: LOG_LEVEL
              value: "info"
            - name: CIRCUIT_BREAKER_ENABLED
              value: "true"
            - name: RETRY_ATTEMPTS
              value: "3"
            - name: HEALTH_CHECK_INTERVAL
              value: "30000"

          # Volume mounts for configuration
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            - name: logs
              mountPath: /app/logs

          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL

          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]

        # Sidecar container for monitoring
        - name: monitoring-sidecar
          image: prom/prometheus:latest
          ports:
            - name: prometheus
              containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
          command:
            - /bin/prometheus
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --storage.tsdb.retention.time=200h
            - --web.enable-lifecycle

      # Init container for setup
      initContainers:
        - name: init-config
          image: busybox:1.35
          command:
            ["sh", "-c", 'echo "Initializing configuration..." && sleep 2']
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "20m"

      # Volumes
      volumes:
        - name: config
          configMap:
            name: konivrer-config
        - name: logs
          emptyDir: {}
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          emptyDir: {}

---
# Service configuration
apiVersion: v1
kind: Service
metadata:
  name: konivrer-service
  namespace: konivrer
  labels:
    app: konivrer
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 3000
      protocol: TCP
    - name: metrics
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: health
      port: 8081
      targetPort: 8081
      protocol: TCP
  selector:
    app: konivrer

---
# Ingress configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: konivrer-ingress
  namespace: konivrer
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - konivrer.example.com
      secretName: konivrer-tls
  rules:
    - host: konivrer.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: konivrer-service
                port:
                  number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: konivrer-hpa
  namespace: konivrer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: konivrer-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: konivrer-pdb
  namespace: konivrer
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: konivrer

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: konivrer-network-policy
  namespace: konivrer
spec:
  podSelector:
    matchLabels:
      app: konivrer
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
