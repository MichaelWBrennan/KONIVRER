AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Automerge-Pro Analytics Platform - Serverless Functions and Data Pipeline"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  KinesisShardCount:
    Type: Number
    Default: 2
    Description: Number of shards for Kinesis stream

  SlackWebhookUrl:
    Type: String
    Description: Slack webhook URL for alerts
    NoEcho: true

  EmailSNSTopic:
    Type: String
    Description: SNS Topic ARN for email alerts

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: nodejs18.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        KINESIS_STREAM_NAME: !Ref AnalyticsStream
        SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
        EMAIL_SNS_TOPIC: !Ref EmailSNSTopic

Resources:
  # Kinesis Data Stream for real-time event ingestion
  AnalyticsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "automerge-analytics-${Environment}"
      ShardCount: !Ref KinesisShardCount
      RetentionPeriodHours: 168 # 7 days
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: Analytics

  # DynamoDB table for storing analytics metadata and configurations
  AnalyticsConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "automerge-analytics-config-${Environment}"
      AttributeDefinitions:
        - AttributeName: configKey
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: configKey
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda function for tracking installs
  InstallTrackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/install-tracking/
      Handler: index.handler
      Description: "Tracks application installation events"
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /track/install
            Method: POST
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt InstallEventQueue.Arn
            BatchSize: 10
      Policies:
        - KinesisPutRecordPolicy:
            StreamName: !Ref AnalyticsStream
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable

  # Lambda function for tracking merge events
  MergeTrackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/merge-tracking/
      Handler: index.handler
      Description: "Tracks code merge and collaboration events"
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /track/merge
            Method: POST
        GitHubWebhook:
          Type: HttpApi
          Properties:
            Path: /webhook/github
            Method: POST
      Policies:
        - KinesisPutRecordPolicy:
            StreamName: !Ref AnalyticsStream
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable

  # Lambda function for billing events
  BillingTrackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/billing-tracking/
      Handler: index.handler
      Description: "Tracks billing events, subscriptions, and revenue"
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /track/billing
            Method: POST
        StripeWebhook:
          Type: HttpApi
          Properties:
            Path: /webhook/stripe
            Method: POST
      Policies:
        - KinesisPutRecordPolicy:
            StreamName: !Ref AnalyticsStream
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable

  # Lambda function for onboarding milestones
  OnboardingTrackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/onboarding-tracking/
      Handler: index.handler
      Description: "Tracks user onboarding progress and milestones"
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            Path: /track/onboarding
            Method: POST
      Policies:
        - KinesisPutRecordPolicy:
            StreamName: !Ref AnalyticsStream
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable

  # Lambda function for anomaly detection
  AnomalyDetectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/anomaly-detection/
      Handler: index.handler
      Description: "Detects anomalies in key performance indicators"
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
          S3_BUCKET: !Ref AnalyticsDataBucket
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: "rate(5 minutes)" # Run every 5 minutes
        KinesisStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyticsStream.Arn
            StartingPosition: LATEST
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 10
      Policies:
        - KinesisPutRecordPolicy:
            StreamName: !Ref AnalyticsStream
        - KinesisReadPolicy:
            StreamName: !Ref AnalyticsStream
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable
        - S3CrudPolicy:
            BucketName: !Ref AnalyticsDataBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt AlertTopic.TopicName

  # Lambda function for PDF report generation
  ReportGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/report-generation/
      Handler: index.handler
      Description: "Generates and distributes PDF reports"
      Timeout: 900 # 15 minutes
      MemorySize: 1024
      Environment:
        Variables:
          TABLE_NAME: !Ref AnalyticsConfigTable
          S3_BUCKET: !Ref AnalyticsDataBucket
          QUICKSIGHT_ACCOUNT_ID: !Ref AWS::AccountId
      Events:
        WeeklySchedule:
          Type: Schedule
          Properties:
            Schedule: "cron(0 9 ? * MON *)" # Every Monday at 9 AM
        ManualTrigger:
          Type: HttpApi
          Properties:
            Path: /reports/generate
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalyticsConfigTable
        - S3CrudPolicy:
            BucketName: !Ref AnalyticsDataBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ReportTopic.TopicName
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - quicksight:*
              Resource: "*"

  # SQS Queue for install events buffering
  InstallEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "automerge-install-events-${Environment}"
      VisibilityTimeoutSeconds: 180
      MessageRetentionPeriod: 1209600 # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt InstallEventDLQ.Arn
        maxReceiveCount: 3

  # Dead letter queue for install events
  InstallEventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "automerge-install-events-dlq-${Environment}"

  # S3 bucket for storing analytics data and reports
  AnalyticsDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "automerge-analytics-data-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Id: ArchiveOldData
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "automerge-alerts-${Environment}"
      DisplayName: "Automerge Analytics Alerts"

  # SNS topic for report distribution
  ReportTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "automerge-reports-${Environment}"
      DisplayName: "Automerge Analytics Reports"

  # CloudWatch Log Groups
  InstallTrackingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${InstallTrackingFunction}"
      RetentionInDays: 30

  MergeTrackingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MergeTrackingFunction}"
      RetentionInDays: 30

  BillingTrackingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${BillingTrackingFunction}"
      RetentionInDays: 30

  OnboardingTrackingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnboardingTrackingFunction}"
      RetentionInDays: 30

  AnomalyDetectionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AnomalyDetectionFunction}"
      RetentionInDays: 30

  ReportGenerationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ReportGenerationFunction}"
      RetentionInDays: 30

Outputs:
  AnalyticsStreamName:
    Description: "Name of the Kinesis Analytics Stream"
    Value: !Ref AnalyticsStream
    Export:
      Name: !Sub "${AWS::StackName}-AnalyticsStream"

  AnalyticsStreamArn:
    Description: "ARN of the Kinesis Analytics Stream"
    Value: !GetAtt AnalyticsStream.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AnalyticsStreamArn"

  AnalyticsDataBucketName:
    Description: "Name of the S3 Analytics Data Bucket"
    Value: !Ref AnalyticsDataBucket
    Export:
      Name: !Sub "${AWS::StackName}-AnalyticsDataBucket"

  InstallTrackingEndpoint:
    Description: "API endpoint for install tracking"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/track/install"
    Export:
      Name: !Sub "${AWS::StackName}-InstallTrackingEndpoint"

  MergeTrackingEndpoint:
    Description: "API endpoint for merge tracking"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/track/merge"
    Export:
      Name: !Sub "${AWS::StackName}-MergeTrackingEndpoint"

  BillingTrackingEndpoint:
    Description: "API endpoint for billing tracking"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/track/billing"
    Export:
      Name: !Sub "${AWS::StackName}-BillingTrackingEndpoint"

  OnboardingTrackingEndpoint:
    Description: "API endpoint for onboarding tracking"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/track/onboarding"
    Export:
      Name: !Sub "${AWS::StackName}-OnboardingTrackingEndpoint"
